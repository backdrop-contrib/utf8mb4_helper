<?php
/**
 * @file
 * UTF8MB4 main module code.
 */

/**
 * Regular expression to filter out problematic values.
 */
define('UTF8MB4_HELPER_REGEX', '%(?:\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})%xs');

/**
 * Implements hook_element_info_alter().
 */
function utf8mb4_helper_element_info_alter(&$type) {
  $problematic_types = array('textfield', 'textarea', 'search');
  foreach ($type as $name => $foo) {
    if (in_array($name, $problematic_types)) {
      $validate_functions = isset($type[$name]['#element_validate']) ? $type[$name]['#element_validate'] : array();
      array_unshift($validate_functions, '_utf8mb4_helper_element_validate');
      $type[$name]['#element_validate'] = $validate_functions;
    }
  }
}

/**
 * Custom validation callback.
 */
function _utf8mb4_helper_element_validate($element, &$form_state, $form) {
  if (!empty($form_state['values'])) {
    $parents = $element['#parents'];
    $submitted_value = backdrop_array_get_nested_value($form_state['values'], $parents);
    if ($submitted_value !== '') {
      $config = config_get('utf8mb4_helper.settings');
      if ($config == NULL) {
        $config = array(
          'strategy' => 'indicate',
          'showmessage' => FALSE,
        );
      }

      if ($config['strategy'] == 'replace') {
        $sanitised = _utf8mb4_helper_values_replace($submitted_value);
        backdrop_array_set_nested_value($form_state['values'], $parents, $sanitised);

        if ($sanitised != $submitted_value && $config['showmessage']) {
          $message = t('Problematic character(s) like emojis got replaced in field %field.', array(
            '%field' => $element['#title'],
          ));
          backdrop_set_message($message, 'info');
        }
      }
      elseif (_utf8mb4_helper_values_indicate($submitted_value)) {
        $message = t('Field %field contains problematic characters like emojis. Remove them to submit the form.', array(
          '%field' => $element['#title'],
        ));
        form_set_error($element['#name'], $message);
      }
    }
  }
}

/**
 * Custom callback to check if a string contains probematic characters.
 *
 * @param string $value
 *   User provided value to check.
 *
 * @return bool
 *   Whether the string contains 4-byte characters or not.
 */
function _utf8mb4_helper_values_indicate($value) {
  $result = preg_match(UTF8MB4_HELPER_REGEX, $value, $matches);
  if ($result > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Custom callback to replace 4-byte with unproblematic characters.
 *
 * @param string $value
 *   User provided value to check.
 *
 * @return string
 *   Sanitized string.
 */
function _utf8mb4_helper_values_replace($value) {
  $replace_with = config_get('utf8mb4_helper.settings', 'replacecharacter');
  $processed = preg_replace(UTF8MB4_HELPER_REGEX, $replace_with, $value);
  return $processed;
}

/**
 * Implements hook_config_info().
 */
function utf8mb4_helper_config_info() {
  $prefixes['utf8mb4.settings'] = array(
    'label' => t('UTF8MB4 Helper settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function utf8mb4_helper_menu() {
  $items['admin/config/content/utf8mb4_helper'] = array(
    'title' => 'UTF8MB4 Helper',
    'description' => 'Configure UTF8MB4 Helper module',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('utf8mb4_helper_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Custom settings form.
 */
function utf8mb4_helper_settings() {
  $form = array();
  $form['#config'] = 'utf8mb4_helper.settings';
  $config = config_get('utf8mb4_helper.settings');

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#description' => t('What should happen, if problematic characters like emojis get submitted in a form?'),
  );
  $form['settings']['strategy'] = array(
    '#type' => 'radios',
    '#title' => t('Strategy'),
    '#default_value' => isset($config['strategy']) ? $config['strategy'] : 'indicate',
    '#options' => array(
      'indicate' => 'Prevent form submission',
      'replace' => 'Replace problematic values on submission',
    ),
    '#description' => t('Whether the values should be rejected or silently replaced.'),
  );

  $options = array(
    '-' => 'Single dash',
    '--' => 'Double dash',
    '_' => 'Single underscore',
    '__' => 'Double underscore',
  );
  $form['settings']['replacecharacter'] = array(
    '#type' => 'select',
    '#title' => t('Replacement character(s)'),
    '#default_value' => isset($config['replacecharacter']) ? $config['replacecharacter'] : '-',
    '#options' => $options,
    '#states' => array(
      'invisible' => array(
        ':input[name="strategy"]' => array('value' => 'indicate'),
      ),
    ),
  );
  $form['settings']['showmessage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message after form submission, if values got replaced.'),
    '#default_value' => isset($config['showmessage']) ? $config['showmessage'] : FALSE,
    '#states' => array(
      'invisible' => array(
        ':input[name="strategy"]' => array('value' => 'indicate'),
      ),
    ),
  );

  return system_settings_form($form);
}
