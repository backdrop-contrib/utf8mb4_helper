<?php
/**
 * @file
 * UTF8MB4 Helper main module code.
 */

/**
 * Regular expression to filter out problematic values.
 */
define('UTF8MB4_HELPER_REGEX', '%(?:\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})%xs');

/**
 * Implements hook_element_info_alter().
 */
function utf8mb4_helper_element_info_alter(&$type) {
  $problematic_types = array('textfield', 'textarea');
  foreach ($type as $name => $values) {
    if (in_array($name, $problematic_types)) {
      $validate_functions = isset($type[$name]['#element_validate']) ? $type[$name]['#element_validate'] : array();
      array_unshift($validate_functions, '_utf8mb4_helper_element_validate');
      $type[$name]['#element_validate'] = $validate_functions;
    }
  }
}

/**
 * Custom validation callback.
 */
function _utf8mb4_helper_element_validate($element, &$form_state, $form) {
  if (!empty($form_state['values'])) {
    $config = config_get('utf8mb4_helper.settings');
    if ($config == NULL) {
      $config = array(
        'strategy' => 'indicate',
        'showmessage' => FALSE,
        'allowlist' => '',
      );
    }

    // Consider allow list settings for the current form.
    $skip = _utf8mb4_helper_skip_form_id($form['#form_id'], $config);
    if ($skip) {
      return;
    }

    $parents = $element['#parents'];
    $submitted_value = backdrop_array_get_nested_value($form_state['values'], $parents);
    if ($submitted_value !== '') {
      $title = isset($element['#title']) ? $element['#title'] : $element['#name'];

      if ($config['strategy'] == 'replace') {
        $sanitised = _utf8mb4_helper_values_replace($submitted_value);
        backdrop_array_set_nested_value($form_state['values'], $parents, $sanitised);

        if ($sanitised != $submitted_value && $config['showmessage']) {
          $message = t('Problematic character(s) like emojis got replaced in field %field.', array(
            '%field' => $title,
          ));
          backdrop_set_message($message, 'info');
        }
      }
      elseif ($chars = _utf8mb4_helper_values_indicate($submitted_value)) {
        $string = implode(" ", $chars);
        $message = format_plural(count($chars),
          'Field %field contains 1 unsupported character: @string. Please remove it to submit the form.',
          'Field %field contains @count unsupported characters: @string. Please remove them to submit the form.', array(
            '%field' => $title,
            '@string' => $string,
          ));
        form_set_error($element['#name'], $message);
      }
    }
  }
}

/**
 * Custom callback to check if a string contains probematic characters.
 *
 * @param string $value
 *   User provided value to check.
 *
 * @return array|bool
 *   If the string contains 4-byte characters, the extracted characters
 *   as an array, FALSE otherwise.
 */
function _utf8mb4_helper_values_indicate($value) {
  $result = preg_match_all(UTF8MB4_HELPER_REGEX, $value, $matches);
  if ($result > 0) {
    return $matches[0];
  }
  return FALSE;
}

/**
 * Custom callback to replace 4-byte with unproblematic characters.
 *
 * @param string $value
 *   User provided value to check.
 *
 * @return string
 *   Sanitized string.
 */
function _utf8mb4_helper_values_replace($value) {
  $replace_with = config_get('utf8mb4_helper.settings', 'replacecharacter');
  $processed = preg_replace(UTF8MB4_HELPER_REGEX, $replace_with, $value);
  return $processed;
}

/**
 * Helper function to check, if a form should skip 4-byte validation.
 *
 * @param string $form_id
 *   The id of the current form.
 * @param array $config
 *   Config options from module settings.
 *
 * @return bool
 *   Whether to skip validation for this form or not.
 */
function _utf8mb4_helper_skip_form_id($form_id, array $config) {
  $skip = &backdrop_static(__FUNCTION__);

  if (!isset($skip)) {
    $skip = FALSE;
    if (empty($config['allowlist'])) {
      return $skip;
    }

    $allowlist = explode("\n", $config['allowlist']);
    foreach ($allowlist as $item) {
      $item = trim($item);
      if ($item == '') {
        continue;
      }
      $pattern = '/' . str_replace('*', '.*', $item) . '/';
      if (preg_match($pattern, $form_id) > 0) {
        $skip = TRUE;
        break;
      }
    }
  }

  return $skip;
}

/**
 * Implements hook_config_info().
 */
function utf8mb4_helper_config_info() {
  $prefixes['utf8mb4.settings'] = array(
    'label' => t('UTF8MB4 Helper settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function utf8mb4_helper_menu() {
  $items['admin/config/content/utf8mb4_helper'] = array(
    'title' => 'UTF8MB4 Helper',
    'description' => 'Configure UTF8MB4 Helper module',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('utf8mb4_helper_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Custom settings form.
 */
function utf8mb4_helper_settings_form($form, &$form_state) {
  // After database conversion:
  if (state_get('database_utf8mb4_active', FALSE)) {
    $message = t('Your database seems to support utf-8 4-byte characters now, this module is obsolete and can get uninstalled.');
    backdrop_set_message($message, 'info', FALSE);
  }

  $form = array();
  $form['#config'] = 'utf8mb4_helper.settings';
  $config = config_get('utf8mb4_helper.settings');

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#description' => t('What should happen, if problematic characters like emojis get submitted in a form?'),
  );
  $form['settings']['strategy'] = array(
    '#type' => 'radios',
    '#title' => t('Strategy'),
    '#default_value' => isset($config['strategy']) ? $config['strategy'] : 'indicate',
    '#options' => array(
      'indicate' => t('Prevent form submission'),
      'replace' => t('Replace problematic values on submission'),
    ),
  );

  $options = array(
    '-' => t('Single dash'),
    '--' => t('Double dash'),
    '_' => t('Single underscore'),
    '__' => t('Double underscore'),
  );
  $form['settings']['replacecharacter'] = array(
    '#type' => 'select',
    '#title' => t('Replacement character(s)'),
    '#default_value' => isset($config['replacecharacter']) ? $config['replacecharacter'] : '-',
    '#options' => $options,
    '#states' => array(
      'invisible' => array(
        ':input[name="strategy"]' => array('value' => 'indicate'),
      ),
    ),
  );
  $form['settings']['showmessage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message after form submission, if values got replaced.'),
    '#default_value' => isset($config['showmessage']) ? $config['showmessage'] : FALSE,
    '#states' => array(
      'invisible' => array(
        ':input[name="strategy"]' => array('value' => 'indicate'),
      ),
    ),
  );

  $description = t('Enter one form ID per line, the "*" character is a wildcard. Examples: !example1 or !example2.', array(
    '!example1' => '<code>views_exposed_form</code>',
    '!example2' => '<code>your_custom_*_form</code>',
  ));
  $description .= '<br />' . t('Validation for 4-byte characters will be skipped on these forms, so make sure that the form does not save text values to the database.');
  $form['settings']['allowlist'] = array(
    '#type' => 'textarea',
    '#title' => 'Form ID allow list',
    '#description' => $description,
    '#default_value' => isset($config['allowlist']) ? $config['allowlist'] : '',
  );
  return system_settings_form($form);
}
